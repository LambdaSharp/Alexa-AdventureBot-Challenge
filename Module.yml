Module: AdventureBot
Version: 1.0
Description: Alexa-based Choose-your-AdventureBot
Dependencies:

  - Module: LambdaSharpS3PackageLoader
    Version: 0.5-WIP

Entries:

  # Parameters

  # NOTE: Specify your alexa skill id (e.g. amzn1.ask.skill.xxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
  #       to prevent the Lambda function from being invoked by other skills.

  - Parameter: AlexaSkillID
    Description: Alexa Skill ID
    Default: "*"

  - Parameter: AdventureFile
    Scope: "*"
    Description: Name of the adventure file to use
    Default: my-demo-adventure.yml

  # Upload adventure and sound files
  - Package: AdventureFilesPackage
    Description: Package of all adventures files to be uploaded to S3 bucket
    Files: assets/adventures/

  - Resource: AdventureFiles
    Scope: "*"
    Type: LambdaSharp::S3::Package
    Properties:
      SourceBucketName: !Ref DeploymentBucketName
      SourcePackageKey: !Ref AdventureFilesPackage
      DestinationBucketName: !Ref AdventureBucket
      DestinationKeyPrefix: Adventures/

  - Package: SoundFilesPackage
    Description: Package of all sound files to be uploaded to S3 bucket
    Files: assets/sounds/*.mp3

  - Resource: SoundFiles
    Scope: "*"
    Description: Package of all sound files to be uploaded to S3 bucket
    Type: LambdaSharp::S3::Package
    Properties:
      SourceBucketName: !Ref DeploymentBucketName
      SourcePackageKey: !Ref SoundFilesPackage
      DestinationBucketName: !Ref AdventureBucket
      DestinationKeyPrefix: Sounds/

  - Resource: AdventureFinishedTopic
    Scope: "*"
    Description: SNS topic to notify when a player finishes an adventure
    Type: AWS::SNS::Topic
    Allow: Publish

  # Create bucket for adventure and sounds files
  - Resource: AdventureBucket
    Scope: "*"
    Description: S3 Bucket for storing adventure assets
    Type: AWS::S3::Bucket
    Allow: ReadWrite

  - Resource: SoundFilesPolicy
    Scope: "*"
    Description: Access policy for sound files in S3 bucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AdventureBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${AdventureBucket}/Sounds/*"
            Principal: "*"

  # Create table for player state
  - Resource: PlayerTable
    Scope: "*"
    Description: DynamoDb table for storing player progression in their adventure
    Type: AWS::DynamoDB::Table
    Allow: ReadWrite
    Pragmas:
      - skip-property-validation
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PlayerId
          AttributeType: S
      KeySchema:
        - AttributeName: PlayerId
          KeyType: HASH

  - Function: Alexa
    Description: Alexa Skill handler for AdventureBot
    Memory: 128
    Timeout: 30
    Sources:
      - Alexa: !Ref AlexaSkillID
