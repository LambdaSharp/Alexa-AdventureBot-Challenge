Module: LambdaSharpDemo.AdventureBot
Description: Alexa-based Choose-your-AdventureBot
Requires:

  - Module: LambdaSharp.S3.IO
    Version: 0.5-WIP

Items:

  # Alexa Settings
  - Parameter: AlexaVendorId
    Description: Alexa Vendor ID
    Section: Alexa Settings
    Label: Amazon vendor ID for developer account hosting the skill

  - Parameter: AlexaClientId
    Description: Alexa Client ID
    Section: Alexa Settings
    Label: Amazon Client ID from Login-with-Amazon (LWA)

  - Parameter: AlexaClientSecret
    Type: Secret
    Description: Alexa Client Secret
    Section: Alexa Settings
    Label: Amazon Client Secret from Login-with-Amazon (LWA)

  # Generated using: ask util generate-lwa-tokens --scope alexa::ask:skills:readwrite
  - Parameter: AlexaRefreshToken
    Description: Alexa Refresh Token
    Section: Alexa Settings
    Label: Amazon Refresh Token Login-with-Amazon (LWA)

  - Parameter: AlexaSkillId
    Description: Alexa Skill ID
    Section: Alexa Settings
    Label: Alexa Skill ID (can be set once the skill has been created)
    Default: "*"

  # Parameters
  - Parameter: AdventureFile
    Description: Name of the adventure file to use
    Section: Adventure Settings
    Label: Name of the adventure file to use
    Scope: "*"
    Default: my-demo-adventure.yml

  # Upload adventure files
  - Package: AdventureFilesPackage
    Description: Package of all adventures files to be uploaded to S3 bucket
    Files: assets/adventures/

  - Resource: AdventureFiles
    Description: Package of all adventure files to be uploaded to S3 bucket
    Type: LambdaSharp::S3::Unzip
    Scope: "*"
    Properties:
      SourceBucket: !Ref DeploymentBucketName
      SourceKey: !Ref AdventureFilesPackage
      DestinationBucket: !Ref AdventureBucket
      DestinationKey: Adventures/

  # Upload sound files
  - Package: SoundFilesPackage
    Description: Package of all sound files to be uploaded to S3 bucket
    Files: assets/sounds/*.mp3

  - Resource: SoundFiles
    Description: Package of all sound files to be uploaded to S3 bucket
    Type: LambdaSharp::S3::Unzip
    Scope: "*"
    Properties:
      SourceBucket: !Ref DeploymentBucketName
      SourceKey: !Ref SoundFilesPackage
      DestinationBucket: !Ref AdventureBucket
      DestinationKey: Sounds/

  # Upload alexa skill manifest files
  - Package: AlexaSkillManifest
    Description: Package of the Alexa skill files
    Files: assets/ask/

  - Resource: AdventureBotSkill
    Description: Alexa Skill to create
    Type: Alexa::ASK::Skill
    Properties:
      VendorId: !Ref AlexaVendorId
      AuthenticationConfiguration:
        ClientId: !Ref AlexaClientId
        ClientSecret: !Ref AlexaClientSecret::Plaintext
        RefreshToken: !Ref AlexaRefreshToken
      SkillPackage:
        Overrides:
          Manifest:
            publishingInformation:
              locales:
                en-US:
                  name: !Ref Module::Id
            apis:
              custom:
                endpoint:
                  uri: !GetAtt Alexa.Arn
        S3Bucket: !Ref DeploymentBucketName
        S3BucketRole: !GetAtt AlexaRole.Arn
        S3Key: !Ref AlexaSkillManifest
    DependsOn: Alexa::Source1AlexaPermission

  - Resource: AlexaRole
    Description: Alexa role for accessing the skill manifest on S3
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Sid: AlexaPrincipal
          Effect: Allow
          Principal:
            Service: alexa-appkit.amazon.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}AlexaS3BucketPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AlexaS3BucketAccess
                Effect: Allow
                Action: s3:GetObject
                Resource: !Sub "arn:aws:s3:::${DeploymentBucketName}/${AlexaSkillManifest}"

  - Resource: AdventureFinishedTopic
    Scope: "*"
    Description: SNS topic to notify when a player finishes an adventure
    Type: AWS::SNS::Topic
    Allow: Publish

  # Create bucket for adventure and sounds files
  - Resource: AdventureBucket
    Scope: "*"
    Description: S3 Bucket for storing adventure assets
    Type: AWS::S3::Bucket
    Allow: ReadWrite

  - Resource: SoundFilesPolicy
    Scope: "*"
    Description: Access policy for sound files in S3 bucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AdventureBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${AdventureBucket}/Sounds/*"
            Principal: "*"

  # Create table for player state
  - Resource: PlayerTable
    Scope: "*"
    Description: DynamoDb table for storing player progression in their adventure
    Type: AWS::DynamoDB::Table
    Allow: ReadWrite
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PlayerId
          AttributeType: S
      KeySchema:
        - AttributeName: PlayerId
          KeyType: HASH

  - Function: Alexa
    Description: Alexa Skill handler for AdventureBot
    Memory: 128
    Timeout: 30
    Sources:
      - Alexa: !Ref AlexaSkillId
